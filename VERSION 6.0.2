using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections;

namespace ScarLanguageVersion_2._0
{
    public partial class Form1 : Form
    {
        string varAssign;
        string varValue;
        Hashtable ht = new Hashtable();
        Hashtable ht1 = new Hashtable();
        string datatype = null;
        bool flag = true;
        public Form1()
        {
            InitializeComponent();
        }

        private void btnCompile_Click(object sender, EventArgs e)
        {
            int num1 = 0;
            float num2 = 0;
            string var = null;
            #region Variable Declaration
            txtErrorArea.Clear();
            flag = true;
            ht.Clear();
            ht1.Clear();
            string[] Lines = txtCode.Lines;

            for (int i = 0; i < Lines.Count(); i++)
            {


                if (Lines[i].Trim().EndsWith(";"))
                {
                    if (Lines[i].Contains(";"))
                    {
                        string[] collonChecking = Lines[i].Trim().Split(';');      // For multiple variable declaration 
                                                                                   // txtErrorArea.Text += "Collon Breaking " + collonChecking.Count() + " \n"; // checking how many Collon Exit in single lines
                        foreach (var item in collonChecking)
                        {
                            if (item != "")
                            {
                                string[] dtype_varaible = item.Trim().Split(' ');
                                dtype_varaible.Count();
                                foreach (var item1 in dtype_varaible)
                                {
                                    //#region CHECK START INT FLOAT CHAR
                                    if (dtype_varaible[0].StartsWith("INT") || dtype_varaible[0].StartsWith("FLOAT") || dtype_varaible[0].StartsWith("CHAR"))//
                                    {//
                                        if (item1.Equals("INT") || item1.Equals("FLOAT") || item1.Equals("CHAR"))
                                        {
                                            datatype = item1;                //Getting datatype
                                        }
                                        else
                                        {

                                            if (item1.TrimStart().TrimEnd().Contains(","))
                                            {
                                                #region Comma spliting
                                                string[] CommaArray = item1.Trim().Split(',');
                                                foreach (var item2 in CommaArray)
                                                {
                                                    try
                                                    {
                                                        if (item2.StartsWith("@") && !item2.EndsWith("@"))
                                                        {
                                                            ht.Add(item2.ToLower(), datatype);
                                                        }
                                                        else
                                                        {
                                                            if (item2 != "")
                                                            {
                                                                txtErrorArea.Text += "Variable Declaration Error " + item2 + " line " + i + " \n";
                                                                flag = false;
                                                            }
                                                            else
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                        txtErrorArea.Text += "Varabile DECLARATION ERROR Repeated " + item2 + " line " + i + " \n";
                                                        flag = false;
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    #region Never start with '=' other portion in else statement


                                                    if (item1.Trim().StartsWith("="))
                                                    {
                                                        txtErrorArea.Text += "Assignment Error " + item1 + " line " + i + " \n";
                                                        flag = false;
                                                    }
                                                    else
                                                    {
                                                        #region var never start and end with only @
                                                        if (item1.StartsWith("@") && !item1.EndsWith("@"))
                                                        {

                                                            // ht.Add(item3.ToLower(), datatype);
                                                            if (item1.Contains("="))
                                                            {
                                                                string[] assignOp = item1.Trim().Split('=');
                                                                foreach (var item3 in assignOp)
                                                                {
                                                                    // string expression = item1;
                                                                    if (item3.Trim().StartsWith("="))
                                                                    {
                                                                        //Error
                                                                    }
                                                                    else
                                                                    {
                                                                        if (item3.Trim().StartsWith("@") && !item3.Trim().EndsWith("@"))
                                                                        {
                                                                            var = item3;
                                                                        }
                                                                        else
                                                                        {
                                                                            if (item3 != "" && flag == true)
                                                                            {
                                                                                if (dtype_varaible[0] != datatype && ht.ContainsKey(var.ToLower()) == true)
                                                                                //if (ht.ContainsKey(var.ToLower()))
                                                                                {
                                                                                    if (ht1.ContainsKey(var.ToLower()))
                                                                                    {
                                                                                        ht1[var.ToLower()] = item3;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        ht1.Add(var.ToLower(), item3);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (!ht.ContainsKey(var.ToLower()) && Convert.ToString(ht[var.ToLower()]) != datatype)
                                                                                    {
                                                                                        ht.Add(var.ToLower(), datatype);
                                                                                        ht1.Add(var.ToLower(), item3);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        txtErrorArea.Text += "Already intialize Datatype " + datatype + " Variable " + var + "Lines " + i + " \n";
                                                                                        flag = false;
                                                                                    }
                                                                                }
                                                                                //flag = true;
                                                                            }
                                                                            else
                                                                            {
                                                                                txtErrorArea.Text += "Value Assignment Error " + item3 + " line " + i + " \n";
                                                                                flag = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                #region only single @A Var Dec

                                                                if (item1.StartsWith("@") && !item1.EndsWith("@"))
                                                                {

                                                                    ht.Add(item1.ToLower(), datatype);
                                                                }
                                                                else
                                                                {
                                                                    if (item1 != "")
                                                                    {
                                                                        txtErrorArea.Text += "Variable Declaration Error " + item1 + " line " + i + " \n";
                                                                        flag = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        flag = true;
                                                                    }
                                                                }
                                                                #endregion
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (item1 != "")
                                                            {
                                                                txtErrorArea.Text += "Variable Declaration Error " + item1 + " line " + i + " \n";
                                                                flag = false;
                                                            }
                                                            else
                                                            {
                                                                flag = true;
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                #region MyRegion
                                                //catch (Exception EX)
                                                //{
                                                //    txtErrorArea.Text += EX + " " + item1 + " line " + i + " \n";
                                                //    flag = false;
                                                //}


                                                //else
                                                //{
                                                //    #region only single @A Var Dec
                                                //    if (item1.StartsWith("@"))
                                                //    {
                                                //        ht.Add(item1.ToLower(), datatype);
                                                //    }
                                                //    else
                                                //    {
                                                //        if (item1 != "")
                                                //        {
                                                //            txtErrorArea.Text += "Variable Declaration Error " + item1 + " line " + i + " \n";
                                                //            flag = false;
                                                //        }
                                                //        else
                                                //        {
                                                //            flag = true;
                                                //        }
                                                //    }
                                                //    #endregion
                                                //}

                                                //}
                                                #endregion
                                                catch (Exception)
                                                {
                                                    txtErrorArea.Text += "Varabile DECLARATION ERROR Repeated " + item1 + " line " + i + " \n";
                                                    flag = false;
                                                }
                                                #endregion
                                            }
                                        }
                                    }//
                                    else
                                    {
                                        #region Comments
                                        //if (item1.Trim().Contains("=") && !item1.Trim().Contains("+") || !item1.Trim().Contains("-") || !item1.Trim().Contains("*") || !item1.Trim().Contains("/"))
                                        //{
                                        //    if (item1.Trim().Contains(','))
                                        //    {
                                        //        string[] commaSpliting = item1.Trim().Split(',');
                                        //        foreach (var comma in commaSpliting)
                                        //        {
                                        //            string varAssign = comma.Trim().Split('=')[0];
                                        //            string varValue = comma.Trim().Split('=')[1];
                                        //            if (varValue != "")
                                        //            {
                                        //                if (item1.Trim().StartsWith("@") && item1.Trim().EndsWith("@"))
                                        //                {
                                        //                    txtErrorArea.Text += "Variable are not Defined Clearly " + comma + " Lines " + i + "\n";
                                        //                    flag = false;
                                        //                }
                                        //                else
                                        //                {
                                        //                    if (ht1.ContainsKey(varAssign.ToLower()) && flag == true)
                                        //                    {
                                        //                        ht1[var.ToLower()] = varValue;
                                        //                    }
                                        //                    else
                                        //                    {
                                        //                        txtErrorArea.Text += "Variable are not Defined Clearly " + comma + " Lines " + i + "\n";
                                        //                        flag = false;
                                        //                    }
                                        //                }
                                        //            }
                                        //            else
                                        //            {
                                        //                txtErrorArea.Text += "MultiTimes = Repeated " + item1 + " Lines " + i + "\n";
                                        //                flag = false;
                                        //            }
                                        //        }

                                        //    }else
                                        //    {
                                        //        string varAssign = item1.Trim().Split('=')[0];
                                        //        string varValue = item1.Trim().Split('=')[1];
                                        //        if (varValue!="" )
                                        //        {
                                        //            if (item1.Trim().StartsWith("@") && item1.Trim().EndsWith("@"))
                                        //            {
                                        //                txtErrorArea.Text += "Variable are not Defined Clearly " + item1 + " Lines " + i + "\n";
                                        //                flag = false;
                                        //            }
                                        //            else
                                        //            {//YHN PAR PHLY HT1 MN DATA INSERT KRNA HA
                                        //                if (ht1.ContainsKey(varAssign.ToLower()) && flag==true)
                                        //                {
                                        //                    ht1[var.ToLower()] = varValue;
                                        //                }
                                        //                else
                                        //                {
                                        //                    txtErrorArea.Text += "Variable are not Defined Clearly " + item1 + " Lines " + i + "\n";
                                        //                    flag = false;
                                        //                }
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            txtErrorArea.Text += "MultiTimes = Repeated " + item1 + " Lines " + i + "\n";
                                        //            flag = false;
                                        //        }
                                        //    }


                                        //}
                                        //else
                                        //{
                                        //    if (!ht.ContainsKey(item1.ToLower()))
                                        //        txtErrorArea.Text += "Varaible or noT Declared " + item1 + " Line " + i + " \n ";
                                        //    flag = false;
                                        //}
                                        #endregion
                                        // WHOLE LINE COMES 
                                        if (item.Trim().Contains("=")/* && !item1.Trim().Contains("+") || !item1.Trim().Contains("-") || !item1.Trim().Contains("*") || !item1.Trim().Contains("/")*/)
                                        {
                                            if (item.Trim().Contains(','))
                                            {
                                                string[] commaSpliting = item.Trim().Split(',');
                                                foreach (var comma in commaSpliting)
                                                {
                                                    string varAssign = comma.Trim().Split('=')[0];
                                                    string varValue = comma.Trim().Split('=')[1];
                                                    if (varValue != "")
                                                    {
                                                        if (item.Trim().StartsWith("@") && item.Trim().EndsWith("@"))
                                                        {
                                                            txtErrorArea.Text += "Variable are not Defined Clearly " + comma + " Lines " + i + "\n";
                                                            flag = false;
                                                        }
                                                        #region Comment
                                                        //else
                                                        //{

                                                        //    //if (ht1.ContainsKey(varAssign.ToLower()) && flag == true)
                                                        //    //{
                                                        //    //    ht1[var.ToLower()] = varValue;
                                                        //    //}
                                                        //    //else
                                                        //    //{
                                                        //    //    txtErrorArea.Text += "Variable are not Defined Clearly " + comma + " Lines " + i + "\n";
                                                        //    //    flag = false;
                                                        //    //}
                                                        #endregion
                                                        else if (ht.ContainsKey(varAssign.ToLower()) && ht1.ContainsKey(varAssign.ToLower()))
                                                        {//YHN PAR PHLY HT1 MN DATA INSERT KRNA HA

                                                            ht1[varAssign.ToLower()] = varValue;

                                                        }
                                                        else if (ht.ContainsKey(varAssign.ToLower()) && !ht1.ContainsKey(varAssign.ToLower()))
                                                        {
                                                            ht1.Add(varAssign.ToLower(), varValue);
                                                        }
                                                        else
                                                        {
                                                            txtErrorArea.Text += "variable are repeated , '=' repeated " + comma + " Lines " + i + "\n";
                                                            flag = false;

                                                        }
                                                    }

                                                }

                                            }
                                            else
                                            {

                                                string s = item;                                 //jUGHARI SYSTEM HERE AHAHA!!!!! 
                                                foreach (var SPA in item.Trim().Split('='))
                                                {
                                                    if (SPA != "")
                                                    {
                                                        foreach (var data in SPA.Trim().Split(' '))
                                                        {
                                                            //string varAssign;
                                                            //string varValue = item1.Trim().Split('=')[1];
                                                            if (/*varValue*/data != "")
                                                            {
                                                                if (data.Trim().StartsWith("@") /*&& !data.Trim().EndsWith("@")*/)
                                                                {
                                                                    if (data.Trim().StartsWith("@") && !data.Trim().EndsWith("@"))
                                                                    {
                                                                        varAssign = data;
                                                                        flag = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        txtErrorArea.Text += "Variable are not Defined Clearly " + data + " Lines " + i + "\n";
                                                                        flag = false;
                                                                    }
                                                                }
                                                                else if (ht.ContainsKey(varAssign.ToLower()) && ht1.ContainsKey(varAssign.ToLower()) && flag == true)
                                                                {
                                                                    //YHN PAR PHLY HT1 MN DATA INSERT KRNA HA

                                                                    ht1[varAssign.ToLower()] = data;


                                                                }
                                                                else if (ht.ContainsKey(varAssign.ToLower()) && !ht1.ContainsKey(varAssign.ToLower()))
                                                                {
                                                                    ht1.Add(varAssign.ToLower(), data);
                                                                }
                                                                else
                                                                {
                                                                    txtErrorArea.Text += "variable are repeated , '=' repeated " + varAssign + " Lines " + i + "\n";
                                                                    flag = false;

                                                                }
                                                                //}
                                                            }
                                                            else
                                                            {
                                                                txtErrorArea.Text += "variable are repeated , '=' repeated " + item1 + " Lines " + i + "\n";
                                                                flag = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        else
                                        {
                                            if (!ht.ContainsKey(item1.ToLower()))
                                                txtErrorArea.Text += "Varaible or noT Declared " + item1 + " Line " + i + " \n ";
                                            flag = false;
                                        }
                                    }
                                    //    #endregion
                                }
                            }
                        }
                    }
                }
                else
                {
                    txtErrorArea.Text += "The Error ';' on Line " + i + "\n";
                    flag = false;
                }


            }
            if (flag == true)
            {
                txtErrorArea.Text += "Variable succesfull declared \n ";
            }

            #region HASH_TABLE DATA
            txtoutPut.Clear();
            foreach (var entries in ht.Keys)
            {
                txtoutPut.Text += "Key = " + entries + "  Datatype = " + ht[entries] + " \n ";
            }
            foreach (var entries in ht1.Keys)
            {
                txtoutPut.Text += "Key = " + entries + "  Datatype = " + ht1[entries] + " \n ";
            }
            #endregion

            #region HardCode Value Assignment or Value Input
            #endregion

            #region Mathematic Operation
            #endregion



        }
    }
}

#region Rough Work
/*    
 *    
 *    else if (item1.Trim().Contains('/'))
                                        {
                                            try
                                            {
                                                string oparatorSolving = item1.Trim().Split('=')[0];
                                                foreach (var item4 in oparatorSolving)
                                                {

                                                }
                                            }
                                            catch (Exception)
                                            {

                                            }
                                        }
                                        else if (item1.Trim().Contains('*'))
                                        {
                                            try
                                            {
                                                string[] oparatorSolving = item1.Trim().Split('=');
                                                foreach (var item4 in oparatorSolving)
                                                {

                                                }
                                            }
                                            catch (Exception)
                                            {

                                            }
                                        }
                                        else if (item1.Trim().Contains('+'))
                                        {
                                            try
                                            {
                                                string[] oparatorSolving = item1.Trim().Split('=');
                                                foreach (var item4 in oparatorSolving)
                                                {

                                                }
                                            }
                                            catch (Exception)
                                            {

                                            }
                                        }
                                        else if (item1.Trim().Contains('-'))
                                        {
                                            try
                                            {
                                                string[] oparatorSolving = item1.Trim().Split('=');
                                                foreach (var item4 in oparatorSolving)
                                                {

                                                }
                                            }
                                            catch (Exception)
                                            {

                                            }
                                        }
                                        
     
    */
#endregion